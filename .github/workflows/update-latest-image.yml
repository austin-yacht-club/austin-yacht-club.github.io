name: Update Latest W017 Image

on:
  schedule:
    # Run every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-image:
    runs-on: ubuntu-latest
    
    # Add environment for GitHub Pages deployment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install jq
      run: |
        if ! command -v jq &> /dev/null; then
          echo "Installing jq..."
          sudo apt-get update
          sudo apt-get install -y jq
        else
          echo "jq is already installed"
        fi
        
    - name: Download latest image
      env:
        SAGE_USERNAME: ${{ secrets.SAGE_USERNAME }}
        SAGE_ACCESS_TOKEN: ${{ secrets.SAGE_ACCESS_TOKEN }}
      run: |
        echo "Fetching latest image metadata..."
        
        # Get the latest image metadata using curl
        RESPONSE=$(curl -s "https://data.sagecontinuum.org/api/v1/query" \
          -H "Content-Type: application/json" \
          -d '{"start":"-1h","filter":{"vsn":"W017","task":"imagesampler-bottom"}}')
        
        echo "API Response: $RESPONSE"
        
        # Extract image URL from response using jq
        IMAGE_URL=$(echo "$RESPONSE" | jq -r '.value // empty')
        
        if [ -z "$IMAGE_URL" ] || [ "$IMAGE_URL" = "null" ]; then
            echo "ERROR: No valid image URL found in response"
            exit 1
        fi
        
        echo "Found image URL: $IMAGE_URL"
        
        # Extract the file path from the storage URL
        # Convert from: https://storage.sagecontinuum.org/api/v1/data/PATH
        # To: https://nrdstor.nationalresearchplatform.org:8443/sage/node-data/PATH
        FILE_PATH=$(echo "$IMAGE_URL" | sed 's|https://storage.sagecontinuum.org/api/v1/data/||')
        NRP_URL="https://nrdstor.nationalresearchplatform.org:8443/sage/node-data/$FILE_PATH"
        
        echo "Transformed URL: $NRP_URL"
        
        # Download the image with authentication
        echo "Downloading image..."
        
        # Try multiple authentication methods
        SUCCESS=false
        
        # Method 1: Try with the original storage URL and Bearer token
        if [ "$SUCCESS" = false ]; then
            echo "Trying original URL with Bearer token..."
            HTTP_CODE=$(curl -s -H "Authorization: Bearer $SAGE_ACCESS_TOKEN" \
                   -o "w017.png.tmp" -w "%{http_code}" "$IMAGE_URL")
            
            if [ "$HTTP_CODE" = "200" ] && [ -s "w017.png.tmp" ]; then
                if file "w017.png.tmp" | grep -q -i "image\|png\|jpeg"; then
                    mv "w017.png.tmp" "w017.png"
                    SUCCESS=true
                    echo "✅ Downloaded with Bearer token from original URL (HTTP $HTTP_CODE)"
                else
                    echo "❌ Bearer token (original URL) failed - downloaded file is not an image"
                    echo "Content: $(head -c 200 w017.png.tmp)"
                    rm -f "w017.png.tmp"
                fi
            else
                echo "❌ Bearer token (original URL) failed (HTTP $HTTP_CODE)"
                rm -f "w017.png.tmp"
            fi
        fi
        
        # Method 2: Try with the transformed NRP URL and Bearer token
        if [ "$SUCCESS" = false ]; then
            echo "Trying NRP URL with Bearer token..."
            HTTP_CODE=$(curl -s -H "Authorization: Bearer $SAGE_ACCESS_TOKEN" \
                   -o "w017.png.tmp" -w "%{http_code}" "$NRP_URL")
            
            if [ "$HTTP_CODE" = "200" ] && [ -s "w017.png.tmp" ]; then
                if file "w017.png.tmp" | grep -q -i "image\|png\|jpeg"; then
                    mv "w017.png.tmp" "w017.png"
                    SUCCESS=true
                    echo "✅ Downloaded with Bearer token from NRP URL (HTTP $HTTP_CODE)"
                else
                    echo "❌ Bearer token (NRP URL) failed - downloaded file is not an image"
                    echo "Content: $(head -c 200 w017.png.tmp)"
                    rm -f "w017.png.tmp"
                fi
            else
                echo "❌ Bearer token (NRP URL) failed (HTTP $HTTP_CODE)"
                rm -f "w017.png.tmp"
            fi
        fi
        
        # Method 3: Try with NRP URL and authz parameter (like your working example)
        if [ "$SUCCESS" = false ]; then
            echo "Trying NRP URL with authz parameter..."
            HTTP_CODE=$(curl -s -o "w017.png.tmp" -w "%{http_code}" "${NRP_URL}?authz=$SAGE_ACCESS_TOKEN")
            
            if [ "$HTTP_CODE" = "200" ] && [ -s "w017.png.tmp" ]; then
                if file "w017.png.tmp" | grep -q -i "image\|png\|jpeg"; then
                    mv "w017.png.tmp" "w017.png"
                    SUCCESS=true
                    echo "✅ Downloaded with authz parameter from NRP URL (HTTP $HTTP_CODE)"
                else
                    echo "❌ Authz parameter (NRP URL) failed - downloaded file is not an image"
                    echo "Content: $(head -c 200 w017.png.tmp)"
                    rm -f "w017.png.tmp"
                fi
            else
                echo "❌ Authz parameter (NRP URL) failed (HTTP $HTTP_CODE)"
                rm -f "w017.png.tmp"
            fi
        fi
        
        # Method 4: Basic auth with username and token on original URL
        if [ "$SUCCESS" = false ]; then
            echo "Trying Basic auth with username and token on original URL..."
            HTTP_CODE=$(curl -s -u "$SAGE_USERNAME:$SAGE_ACCESS_TOKEN" \
                   -o "w017.png.tmp" -w "%{http_code}" "$IMAGE_URL")
            
            if [ "$HTTP_CODE" = "200" ] && [ -s "w017.png.tmp" ]; then
                if file "w017.png.tmp" | grep -q -i "image\|png\|jpeg"; then
                    mv "w017.png.tmp" "w017.png"
                    SUCCESS=true
                    echo "✅ Downloaded with Basic auth from original URL (HTTP $HTTP_CODE)"
                else
                    echo "❌ Basic auth (original URL) failed - downloaded file is not an image"
                    echo "Content: $(head -c 200 w017.png.tmp)"
                    rm -f "w017.png.tmp"
                fi
            else
                echo "❌ Basic auth (original URL) failed (HTTP $HTTP_CODE)"
                rm -f "w017.png.tmp"
            fi
        fi
        
        # Method 5: Try without authentication (public access)
        if [ "$SUCCESS" = false ]; then
            echo "Trying without authentication..."
            HTTP_CODE=$(curl -s -o "w017.png.tmp" -w "%{http_code}" "$IMAGE_URL")
            
            if [ "$HTTP_CODE" = "200" ] && [ -s "w017.png.tmp" ]; then
                if file "w017.png.tmp" | grep -q -i "image\|png\|jpeg"; then
                    mv "w017.png.tmp" "w017.png"
                    SUCCESS=true
                    echo "✅ Downloaded without authentication (HTTP $HTTP_CODE)"
                else
                    echo "❌ No authentication failed - downloaded file is not an image"
                    echo "Content: $(head -c 200 w017.png.tmp)"
                    rm -f "w017.png.tmp"
                fi
            else
                echo "❌ No authentication failed (HTTP $HTTP_CODE)"
                rm -f "w017.png.tmp"
            fi
        fi
        
        if [ "$SUCCESS" = false ]; then
            echo "❌ Failed to download image with any authentication method"
            echo "All authentication methods failed. Check your credentials and API access."
            exit 1
        fi
        
        # Verify the downloaded file
        if [ ! -f "w017.png" ]; then
            echo "❌ Image file not found after download"
            exit 1
        fi
        
        FILE_SIZE=$(stat -c%s "w017.png" 2>/dev/null || stat -f%z "w017.png")
        if [ "$FILE_SIZE" -eq 0 ]; then
            echo "❌ Downloaded file is empty"
            exit 1
        fi
        
        # Double-check that it's actually an image file
        if command -v file >/dev/null 2>&1; then
            FILE_TYPE=$(file "w017.png")
            echo "📄 File type: $FILE_TYPE"
            
            if echo "$FILE_TYPE" | grep -q -i "image\|png\|jpeg"; then
                echo "✅ Valid image file confirmed"
            else
                echo "❌ Downloaded file is not a valid image"
                echo "File content (first 200 chars): $(head -c 200 w017.png)"
                exit 1
            fi
        fi
        
        echo "✅ Successfully downloaded image"
        echo "📊 File size: $FILE_SIZE bytes"
        
    - name: Check if image was updated
      id: check_changes
      run: |
        if [ -f "w017.png" ]; then
          # Check if there are any changes to commit
          git add w017.png
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Image was updated"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "Image file not found"
          exit 1
        fi
        
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add w017.png
        git commit -m "Update latest W017 image - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        git push
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: .
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
    - name: Create summary
      run: |
        echo "## W017 Image Update Summary" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
          echo "✅ Successfully updated w017.png with latest image" >> $GITHUB_STEP_SUMMARY
          echo "📅 Updated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "🌐 GitHub Pages will be updated automatically" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ No changes - image is already up to date" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "w017.png" ]; then
          file_size=$(stat -c%s "w017.png" 2>/dev/null || stat -f%z "w017.png")
          echo "📊 File size: ${file_size} bytes" >> $GITHUB_STEP_SUMMARY
        fi
